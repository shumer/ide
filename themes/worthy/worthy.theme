<?php
/**
 * @File
 * Worthy theme hooks.
 */
use Drupal\Core\Url;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Render\Element;
/**
 * Override template_preprocess_html.
 */
function worthy_preprocess_html(&$variables) {
  $variables['#attached']['drupalSettings']['path']['path_to_theme'] = $variables['directory'];
}

/**
 * Override template_preprocess.
 */
function worthy_preprocess_page(&$variables) {

  // Get contact form.
  $default_form = \Drupal::config('contact.settings')->get('default_form');
  $entity = \Drupal::entityManager()->getStorage('contact_form')->load($default_form);
  $message = \Drupal::entityManager()
    ->getStorage('contact_message')
    ->create(array(
      'contact_form' => $entity->id(),
    ));
  $variables['contact_form'] = \Drupal::service('entity.form_builder')->getForm($message);
}

/**
 * Override template_preprocess_input.
 */
function worthy_preprocess_textarea(&$variables) {
  $element = &$variables['element'];
  $variables['attributes']['class'][] = 'form-control';
  $variables['appendix'] = $element['#_appendix'];
}

/**
 * Override template_preprocess_input.
 */
function worthy_preprocess_input(&$variables) {
  $element = &$variables['element'];
  if ($element['#type'] == 'submit') {
    $variables['attributes']['class'] = ['btn'];
    $variables['attributes']['class'][] = 'btn-default';
  }
  else {
    $variables['attributes']['class'][] = 'form-control';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function worthy_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $form_id = $variables['element']['#form_id'];
  $suggestions[] = 'worthy_form';
  $suggestions[] = 'worthy_form__' . $form_id;
}

/**
 * Implements hook_theme().
 */
function worthy_theme($existing, $type, $theme, $path) {

  $theme_path = drupal_get_path('theme', 'worthy');

  // Meta theme for all site forms.
  $hooks['worthy_form'] = array(
    'render element' => 'element',
    'path' => $theme_path . '/templates/form',
  );

  $hooks += drupal_find_theme_templates($hooks, '.html.twig', $path);

  return $hooks;
}

/**
 * Override template_preprocess_input.
 */
function worthy_preprocess_paragraph(&$variables) {
  $preprocessor = new \Drupal\ide_themer\Preprocessor\ParagraphPreprocessor($variables);
  $dispatcher = new \Drupal\ide_themer\Dispatcher\Dispatcher($preprocessor);
  $dispatcher->dispatch();
}

/**
 * Override template_preprocess_node.
 */
function worthy_preprocess_node(&$variables) {
  $preprocessor = new \Drupal\ide_themer\Preprocessor\NodePreprocessor($variables);
  $dispatcher = new \Drupal\ide_themer\Dispatcher\Dispatcher($preprocessor);
  $dispatcher->dispatch();
}

/**
 * Override template_preprocess_html.
 */
function worthy_preprocess_block(&$variables) {
  $preprocessor = new \Drupal\ide_themer\Preprocessor\BlockPreprocessor($variables);
  $preprocessor->preprocess();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function worthy_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__node__' . $node->getType();
  }
  if ($term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
    $suggestions[] = 'page__term__' . $term->getVocabularyId();
  }
}
function worthy_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#theme'][] = 'worthy_form';
  dpm($form, 'form');
}
/**
 * Preprocess togo_form, threat forms like enteties.
 */
function worthy_preprocess_worthy_form(&$variables) {
  $element = &$variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = UrlHelper::stripDangerousProtocols($element['#action']);
  }
  Element::setAttributes($element, array('method', 'id'));
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }

  $element['message']['widget'][0]['value']['#_appendix'] = '<i class="fa fa-pencil form-control-feedback"></i>';
  $variables['attributes'] = $element['#attributes'];
  $variables['children'] = drupal_render_children($element);
}
